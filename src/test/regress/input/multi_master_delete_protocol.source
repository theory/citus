--
-- MULTI_MASTER_DELETE_PROTOCOL
--

-- Create a new range partitioned customer_delete_protocol table and stage data into it.

CREATE TABLE customer_delete_protocol (
        c_custkey integer not null,
        c_name varchar(25) not null,
        c_address varchar(40) not null,
        c_nationkey integer not null,
        c_phone char(15) not null,
        c_acctbal decimal(15,2) not null,
        c_mktsegment char(10) not null,
        c_comment varchar(117) not null);
SELECT master_create_distributed_table('customer_delete_protocol', 'c_custkey', 'append');

\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.1.data' with delimiter '|'
\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.2.data' with delimiter '|'
\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.3.data' with delimiter '|'


-- Testing master_delete_from_shards
-- Verify that master_delete_from_shards cannot be called in a transaction block
BEGIN;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey > 500 AND c_custkey < 500');
ROLLBACK;

-- Check that master_delete_from_shards cannot be called with non-distributed tables
CREATE TABLE temporary_nondistributed_table (
		col_1 integer,
		col_2 text);
INSERT INTO temporary_nondistributed_table VALUES (37, 'eren'), (31, 'onder');
SELECT master_delete_from_shards('DELETE FROM temporary_nondistributed_table WHERE col_1 = 37');;
DROP TABLE temporary_nondistributed_table;

-- Check that master_delete_from_shards cannot be called with complex operator expressions 
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey = c_nationkey');

-- Check that we can successfully delete from multiple shards with 1PC
SET citus.multi_shard_commit_protocol TO '1pc';
SELECT count(*) FROM customer_delete_protocol;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey < 100');
SELECT count(*) FROM customer_delete_protocol;

-- Check that we can successfully delete from multiple shards with 2PC
SET citus.multi_shard_commit_protocol TO '2pc';
SELECT count(*) FROM customer_delete_protocol;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey < 200');
SELECT count(*) FROM customer_delete_protocol;

-- Check that shard pruning works
SET client_min_messages TO DEBUG2;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey = 5001');
SET client_min_messages TO NOTICE;


-- Testing master_apply_delete_command
-- Check that we don't support conditions on columns other than partition key.

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_acctbal > 0.0');

-- Check that we delete a shard if and only if all rows in the shard satisfy the condition.

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol 
                                           WHERE c_custkey > 6500');
SELECT count(*) from customer_delete_protocol;

-- Delete one shard that satisfies the given conditions.

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_custkey > 1000 AND c_custkey < 3000');
SELECT count(*) from customer_delete_protocol;

-- Delete all shards if no condition is provided.

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');
SELECT count(*) FROM customer_delete_protocol;

-- Verify that empty shards are deleted if no condition is provided
SELECT 1 AS one FROM master_create_empty_shard('customer_delete_protocol');
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_custkey > 1000');
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');

-- Verify that master_apply_delete_command cannot be called in a transaction block
BEGIN;
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');
ROLLBACK;

