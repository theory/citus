--
-- MULTI_MASTER_DELETE_PROTOCOL
--
-- Create a new range partitioned customer_delete_protocol table and stage data into it.
CREATE TABLE customer_delete_protocol (
        c_custkey integer not null,
        c_name varchar(25) not null,
        c_address varchar(40) not null,
        c_nationkey integer not null,
        c_phone char(15) not null,
        c_acctbal decimal(15,2) not null,
        c_mktsegment char(10) not null,
        c_comment varchar(117) not null);
SELECT master_create_distributed_table('customer_delete_protocol', 'c_custkey', 'append');
 master_create_distributed_table 
---------------------------------
 
(1 row)

\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.1.data' with delimiter '|'
\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.2.data' with delimiter '|'
\STAGE customer_delete_protocol FROM '@abs_srcdir@/data/customer.3.data' with delimiter '|'
-- Testing master_delete_from_shards
-- Verify that master_delete_from_shards cannot be called in a transaction block
BEGIN;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey > 500 AND c_custkey < 500');
ERROR:  master_delete_from_shards cannot run inside a transaction block
ROLLBACK;
-- Check that master_delete_from_shards cannot be called with non-distributed tables
CREATE TABLE temporary_nondistributed_table (
		col_1 integer,
		col_2 text);
INSERT INTO temporary_nondistributed_table VALUES (37, 'eren'), (31, 'onder');
SELECT master_delete_from_shards('DELETE FROM temporary_nondistributed_table WHERE col_1 = 37');;
ERROR:  relation "temporary_nondistributed_table" is not a distributed table
DROP TABLE temporary_nondistributed_table;
-- Check that master_delete_from_shards cannot be called with complex operator expressions 
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey = c_nationkey');
ERROR:  cannot delete from distributed table
DETAIL:  Delete query has a complex operator expression
-- Check that we can successfully delete from multiple shards with 1PC
SET citus.multi_shard_commit_protocol TO '1pc';
SELECT count(*) FROM customer_delete_protocol;
 count 
-------
  3000
(1 row)

SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey < 100');
 master_delete_from_shards 
---------------------------
                        99
(1 row)

SELECT count(*) FROM customer_delete_protocol;
 count 
-------
  2901
(1 row)

-- Check that we can successfully delete from multiple shards with 2PC
SET citus.multi_shard_commit_protocol TO '2pc';
SELECT count(*) FROM customer_delete_protocol;
 count 
-------
  2901
(1 row)

SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey < 200');
 master_delete_from_shards 
---------------------------
                       100
(1 row)

SELECT count(*) FROM customer_delete_protocol;
 count 
-------
  2801
(1 row)

-- Check that shard pruning works
SET client_min_messages TO DEBUG2;
SELECT master_delete_from_shards('DELETE FROM customer_delete_protocol WHERE c_custkey = 5001');
DEBUG:  predicate pruning for shardId 102042
DEBUG:  predicate pruning for shardId 102044
DEBUG:  predicate pruning for shardId 102043
 master_delete_from_shards 
---------------------------
                         0
(1 row)

SET client_min_messages TO NOTICE;
-- Testing master_apply_delete_command
-- Check that we don't support conditions on columns other than partition key.
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_acctbal > 0.0');
ERROR:  cannot delete from distributed table
DETAIL:  Where clause includes a column other than partition column
-- Check that we delete a shard if and only if all rows in the shard satisfy the condition.
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol 
                                           WHERE c_custkey > 6500');
 master_apply_delete_command 
-----------------------------
                           0
(1 row)

SELECT count(*) from customer_delete_protocol;
 count 
-------
  2801
(1 row)

-- Delete one shard that satisfies the given conditions.
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_custkey > 1000 AND c_custkey < 3000');
 master_apply_delete_command 
-----------------------------
                           1
(1 row)

SELECT count(*) from customer_delete_protocol;
 count 
-------
  1801
(1 row)

-- Delete all shards if no condition is provided.
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');
 master_apply_delete_command 
-----------------------------
                           2
(1 row)

SELECT count(*) FROM customer_delete_protocol;
 count 
-------
      
(1 row)

-- Verify that empty shards are deleted if no condition is provided
SELECT 1 AS one FROM master_create_empty_shard('customer_delete_protocol');
 one 
-----
   1
(1 row)

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol
                                           WHERE c_custkey > 1000');
 master_apply_delete_command 
-----------------------------
                           0
(1 row)

SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');
 master_apply_delete_command 
-----------------------------
                           1
(1 row)

-- Verify that master_apply_delete_command cannot be called in a transaction block
BEGIN;
SELECT master_apply_delete_command('DELETE FROM customer_delete_protocol');
ERROR:  master_apply_delete_command cannot run inside a transaction block
ROLLBACK;
